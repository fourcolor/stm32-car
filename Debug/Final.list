
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005770  08005770  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005778  08005778  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012eac  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ebc  20012ebc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001309c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bab  00000000  00000000  000330dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a27  00000000  00000000  00037df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013366  00000000  00000000  00059817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d185f  00000000  00000000  0006cb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e3dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f8  00000000  00000000  0013e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005720 	.word	0x08005720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005720 	.word	0x08005720

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <forward>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */



void forward(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <forward+0x30>)
 80004de:	f000 feff 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2102      	movs	r1, #2
 80004e6:	4807      	ldr	r0, [pc, #28]	; (8000504 <forward+0x30>)
 80004e8:	f000 fefa 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <forward+0x30>)
 80004f2:	f000 fef5 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2104      	movs	r1, #4
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <forward+0x30>)
 80004fc:	f000 fef0 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <backward>:
void backward(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2101      	movs	r1, #1
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <backward+0x30>)
 8000512:	f000 fee5 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2102      	movs	r1, #2
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <backward+0x30>)
 800051c:	f000 fee0 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2108      	movs	r1, #8
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <backward+0x30>)
 8000526:	f000 fedb 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
 800052e:	4802      	ldr	r0, [pc, #8]	; (8000538 <backward+0x30>)
 8000530:	f000 fed6 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020800 	.word	0x40020800

0800053c <left>:

void left(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <left+0x30>)
 8000546:	f000 fecb 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2102      	movs	r1, #2
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <left+0x30>)
 8000550:	f000 fec6 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <left+0x30>)
 800055a:	f000 fec1 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2104      	movs	r1, #4
 8000562:	4802      	ldr	r0, [pc, #8]	; (800056c <left+0x30>)
 8000564:	f000 febc 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020800 	.word	0x40020800

08000570 <right>:

void right(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <right+0x30>)
 800057a:	f000 feb1 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <right+0x30>)
 8000584:	f000 feac 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <right+0x30>)
 800058e:	f000 fea7 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <right+0x30>)
 8000598:	f000 fea2 	bl	80012e0 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020800 	.word	0x40020800

080005a4 <stop>:

void stop(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(in1_GPIO_Port, in1_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <stop+0x30>)
 80005ae:	f000 fe97 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_GPIO_Port, in2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <stop+0x30>)
 80005b8:	f000 fe92 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in4_GPIO_Port, in4_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <stop+0x30>)
 80005c2:	f000 fe8d 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2104      	movs	r1, #4
 80005ca:	4802      	ldr	r0, [pc, #8]	; (80005d4 <stop+0x30>)
 80005cc:	f000 fe88 	bl	80012e0 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020800 	.word	0x40020800

080005d8 <motor>:

void motor(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
//			 memset(s, '\0', 20);
//		}
//		xTaskResumeAll();
//		vTaskDelay(500);
//	}
	forward();
 80005dc:	f7ff ff7a 	bl	80004d4 <forward>
	vTaskDelay(3000);
 80005e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e4:	f003 fbe4 	bl	8003db0 <vTaskDelay>
	backward();
 80005e8:	f7ff ff8e 	bl	8000508 <backward>
	vTaskDelay(3000);
 80005ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f0:	f003 fbde 	bl	8003db0 <vTaskDelay>
	left();
 80005f4:	f7ff ffa2 	bl	800053c <left>
	vTaskDelay(3000);
 80005f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fc:	f003 fbd8 	bl	8003db0 <vTaskDelay>
	backward();
 8000600:	f7ff ff82 	bl	8000508 <backward>
	vTaskDelay(3000);
 8000604:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000608:	f003 fbd2 	bl	8003db0 <vTaskDelay>
	right();
 800060c:	f7ff ffb0 	bl	8000570 <right>
	vTaskDelay(3000);
 8000610:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000614:	f003 fbcc 	bl	8003db0 <vTaskDelay>
	stop();
 8000618:	f7ff ffc4 	bl	80005a4 <stop>
	vTaskDelay(5000);
 800061c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000620:	f003 fbc6 	bl	8003db0 <vTaskDelay>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <HAL_UART_RxCpltCallback>:

//void bt(){
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2 ){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_UART_RxCpltCallback+0x2c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d108      	bne.n	800064c <HAL_UART_RxCpltCallback+0x24>
    	char k[22];
	    s[0] = recv_char[0];
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_UART_RxCpltCallback+0x30>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_UART_RxCpltCallback+0x34>)
 8000640:	701a      	strb	r2, [r3, #0]
////		    strcpy(msg.data, recv_str);
////		    xQueueSend(q, &msg, 0);
////		    memset(recv_str, 0, 200);
//		    recv_str_count = 0;
//	    }
	 HAL_UART_Receive_IT(&huart2, &recv_char, 1); //UART1 Interrupt call
 8000642:	2201      	movs	r2, #1
 8000644:	4904      	ldr	r1, [pc, #16]	; (8000658 <HAL_UART_RxCpltCallback+0x30>)
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <HAL_UART_RxCpltCallback+0x38>)
 8000648:	f001 fde9 	bl	800221e <HAL_UART_Receive_IT>
	}
}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40004400 	.word	0x40004400
 8000658:	200000b4 	.word	0x200000b4
 800065c:	200000b8 	.word	0x200000b8
 8000660:	20000070 	.word	0x20000070

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fae7 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f823 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 f8d3 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000676:	f000 f8a7 	bl	80007c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800067a:	f000 f87b 	bl	8000774 <MX_USART1_UART_Init>
  q = xQueueCreate(10, sizeof(qmsg));
 800067e:	2200      	movs	r2, #0
 8000680:	2114      	movs	r1, #20
 8000682:	200a      	movs	r0, #10
 8000684:	f002 fe12 	bl	80032ac <xQueueGenericCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <main+0x48>)
 800068c:	6013      	str	r3, [r2, #0]
  xTaskCreate(motor,"motor",256,NULL,12,NULL);
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	230c      	movs	r3, #12
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <main+0x4c>)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <main+0x50>)
 80006a0:	f003 fa48 	bl	8003b34 <xTaskCreate>
//  HAL_UART_Receive_IT(&huart2, &recv_char, 1);
  vTaskStartScheduler();
 80006a4:	f003 fbb8 	bl	8003e18 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x44>
 80006aa:	bf00      	nop
 80006ac:	200000cc 	.word	0x200000cc
 80006b0:	08005738 	.word	0x08005738
 80006b4:	080005d9 	.word	0x080005d9

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f822 	bl	8005710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <SystemClock_Config+0xb4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <SystemClock_Config+0xb8>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fdf3 	bl	8001314 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000734:	f000 f8ec 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f856 	bl	8001804 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075e:	f000 f8d7 	bl	8000910 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART1_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007ac:	f001 fcea 	bl	8002184 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f8ab 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000002c 	.word	0x2000002c
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 fcc0 	bl	8002184 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f881 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000070 	.word	0x20000070
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <MX_GPIO_Init+0xc4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_GPIO_Init+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, in1_Pin|in2_Pin|in3_Pin|in4_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	4816      	ldr	r0, [pc, #88]	; (80008e4 <MX_GPIO_Init+0xc8>)
 800088c:	f000 fd28 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000898:	f000 fd22 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : in1_Pin in2_Pin in3_Pin in4_Pin */
  GPIO_InitStruct.Pin = in1_Pin|in2_Pin|in3_Pin|in4_Pin;
 800089c:	230f      	movs	r3, #15
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xc8>)
 80008b4:	f000 fb78 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 80008b8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_GPIO_Init+0xcc>)
 80008d2:	f000 fb69 	bl	8000fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f9bf 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40001400 	.word	0x40001400

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* User can auart2
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <HAL_UART_MspInit+0xf8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12d      	bne.n	80009ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009dc:	2307      	movs	r3, #7
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <HAL_UART_MspInit+0x100>)
 80009e8:	f000 fade 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ec:	e038      	b.n	8000a60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <HAL_UART_MspInit+0x104>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d133      	bne.n	8000a60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0xfc>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a30:	230c      	movs	r3, #12
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a40:	2307      	movs	r3, #7
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <HAL_UART_MspInit+0x100>)
 8000a4c:	f000 faac 	bl	8000fa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	210b      	movs	r1, #11
 8000a54:	2026      	movs	r0, #38	; 0x26
 8000a56:	f000 f9eb 	bl	8000e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5a:	2026      	movs	r0, #38	; 0x26
 8000a5c:	f000 fa04 	bl	8000e68 <HAL_NVIC_EnableIRQ>
}
 8000a60:	bf00      	nop
 8000a62:	3730      	adds	r7, #48	; 0x30
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40004400 	.word	0x40004400

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa4:	f107 0210 	add.w	r2, r7, #16
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f888 	bl	8001bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000abe:	f001 f859 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8000ac2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac6:	f001 f855 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8000aca:	4603      	mov	r3, r0
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_InitTick+0xe8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	3b01      	subs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_InitTick+0xec>)
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_InitTick+0xf0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_InitTick+0xec>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_InitTick+0xec>)
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_InitTick+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_InitTick+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000b04:	4817      	ldr	r0, [pc, #92]	; (8000b64 <HAL_InitTick+0xec>)
 8000b06:	f001 f88f 	bl	8001c28 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11b      	bne.n	8000b50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <HAL_InitTick+0xec>)
 8000b1a:	f001 f8df 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b2c:	2037      	movs	r0, #55	; 0x37
 8000b2e:	f000 f99b 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d808      	bhi.n	8000b4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2037      	movs	r0, #55	; 0x37
 8000b3e:	f000 f977 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0xf4>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e002      	b.n	8000b50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	40001400 	.word	0x40001400
 8000b6c:	20000004 	.word	0x20000004

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f001 fb6d 	bl	8002280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000070 	.word	0x20000070

08000bb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM7_IRQHandler+0x10>)
 8000bb6:	f001 f901 	bl	8001dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000d0 	.word	0x200000d0

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c12:	f7ff ffd7 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 fd49 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fd23 	bl	8000664 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c2c:	08005780 	.word	0x08005780
  ldr r2, =_sbss
 8000c30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c34:	20012ebc 	.word	0x20012ebc

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8d8 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff ff04 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe56 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000118 	.word	0x20000118

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000118 	.word	0x20000118

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e92:	f7ff ff09 	bl	8000ca8 <HAL_GetTick>
 8000e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e052      	b.n	8000f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0216 	bic.w	r2, r2, #22
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <HAL_DMA_Abort+0x62>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0208 	bic.w	r2, r2, #8
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f06:	e013      	b.n	8000f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f08:	f7ff fece 	bl	8000ca8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d90c      	bls.n	8000f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e015      	b.n	8000f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e4      	bne.n	8000f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f42:	223f      	movs	r2, #63	; 0x3f
 8000f44:	409a      	lsls	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d004      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00c      	b.n	8000f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2205      	movs	r2, #5
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e16b      	b.n	800129c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 815a 	bne.w	8001296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80b4 	beq.w	8001296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a5b      	ldr	r2, [pc, #364]	; (80012b8 <HAL_GPIO_Init+0x310>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_GPIO_Init+0x314>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x318>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <HAL_GPIO_Init+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	; (80012c8 <HAL_GPIO_Init+0x320>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x21a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <HAL_GPIO_Init+0x324>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x216>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x328>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x212>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <HAL_GPIO_Init+0x32c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x20e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <HAL_GPIO_Init+0x330>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x20a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00e      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x310>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_GPIO_Init+0x334>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_GPIO_Init+0x334>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_GPIO_Init+0x334>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae90 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e267      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d075      	beq.n	800141e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001332:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b04      	cmp	r3, #4
 800133c:	d00c      	beq.n	8001358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133e:	4b85      	ldr	r3, [pc, #532]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	2b08      	cmp	r3, #8
 8001348:	d112      	bne.n	8001370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134a:	4b82      	ldr	r3, [pc, #520]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001356:	d10b      	bne.n	8001370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d05b      	beq.n	800141c <HAL_RCC_OscConfig+0x108>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d157      	bne.n	800141c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e242      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x74>
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e01d      	b.n	80013c4 <HAL_RCC_OscConfig+0xb0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x98>
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6c      	ldr	r2, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0xb0>
 80013ac:	4b69      	ldr	r3, [pc, #420]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc6c 	bl	8000ca8 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fc68 	bl	8000ca8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e207      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0xc0>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc58 	bl	8000ca8 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc54 	bl	8000ca8 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e1f3      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0xe8>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d063      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	2b08      	cmp	r3, #8
 8001440:	d11c      	bne.n	800147c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d116      	bne.n	800147c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <HAL_RCC_OscConfig+0x152>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e1c7      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4937      	ldr	r1, [pc, #220]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	e03a      	b.n	80014f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x244>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fc0d 	bl	8000ca8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fc09 	bl	8000ca8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1a8      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4925      	ldr	r1, [pc, #148]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
 80014c4:	e015      	b.n	80014f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x244>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbec 	bl	8000ca8 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbe8 	bl	8000ca8 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e187      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d036      	beq.n	800156c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d016      	beq.n	8001534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_RCC_OscConfig+0x248>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fbcc 	bl	8000ca8 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fbc8 	bl	8000ca8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e167      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x240>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x200>
 8001532:	e01b      	b.n	800156c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_OscConfig+0x248>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fbb5 	bl	8000ca8 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	e00e      	b.n	8001560 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fbb1 	bl	8000ca8 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d907      	bls.n	8001560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e150      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
 8001554:	40023800 	.word	0x40023800
 8001558:	42470000 	.word	0x42470000
 800155c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b88      	ldr	r3, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ea      	bne.n	8001542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8097 	beq.w	80016a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b7d      	ldr	r3, [pc, #500]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a7c      	ldr	r2, [pc, #496]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b7a      	ldr	r3, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b77      	ldr	r3, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a73      	ldr	r2, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb71 	bl	8000ca8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fb6d 	bl	8000ca8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e10c      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x474>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x2ea>
 80015f0:	4b64      	ldr	r3, [pc, #400]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x324>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x30c>
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0x324>
 8001620:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b55      	ldr	r3, [pc, #340]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d015      	beq.n	800166c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fb32 	bl	8000ca8 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb2e 	bl	8000ca8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0cb      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0ee      	beq.n	8001648 <HAL_RCC_OscConfig+0x334>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fb1c 	bl	8000ca8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fb18 	bl	8000ca8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0b5      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ee      	bne.n	8001674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a1 	beq.w	80017f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d05c      	beq.n	8001778 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d141      	bne.n	800174a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x478>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff faec 	bl	8000ca8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fae8 	bl	8000ca8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e087      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	491b      	ldr	r1, [pc, #108]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x478>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fac1 	bl	8000ca8 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fabd 	bl	8000ca8 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e05c      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x416>
 8001748:	e054      	b.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x478>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff faaa 	bl	8000ca8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff faa6 	bl	8000ca8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e045      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_RCC_OscConfig+0x470>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x444>
 8001776:	e03d      	b.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e038      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000
 800178c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d028      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d121      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0cc      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d90c      	bls.n	8001840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b8      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	494d      	ldr	r1, [pc, #308]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d044      	beq.n	8001924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e06f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e067      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f023 0203 	bic.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4934      	ldr	r1, [pc, #208]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f9d8 	bl	8000ca8 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f9d4 	bl	8000ca8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e04f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 020c 	and.w	r2, r3, #12
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	429a      	cmp	r2, r3
 8001922:	d1eb      	bne.n	80018fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d20c      	bcs.n	800194c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e032      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198a:	f000 f821 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	490a      	ldr	r1, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f864 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08005758 	.word	0x08005758
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d4:	b090      	sub	sp, #64	; 0x40
 80019d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d00d      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x40>
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	f200 80a1 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x34>
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a08:	e09b      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a0e:	e098      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	627a      	str	r2, [r7, #36]	; 0x24
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a3c:	fb03 f201 	mul.w	r2, r3, r1
 8001a40:	2300      	movs	r3, #0
 8001a42:	fb00 f303 	mul.w	r3, r0, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a50:	460a      	mov	r2, r1
 8001a52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a56:	4413      	add	r3, r2
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6a:	f7fe fbb1 	bl	80001d0 <__aeabi_uldivmod>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4613      	mov	r3, r2
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a76:	e053      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	2200      	movs	r2, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	617a      	str	r2, [r7, #20]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a8a:	f04f 0b00 	mov.w	fp, #0
 8001a8e:	4652      	mov	r2, sl
 8001a90:	465b      	mov	r3, fp
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ebb2 080a 	subs.w	r8, r2, sl
 8001aaa:	eb63 090b 	sbc.w	r9, r3, fp
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001abe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ac2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ac6:	eb63 0509 	sbc.w	r5, r3, r9
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	00eb      	lsls	r3, r5, #3
 8001ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad8:	00e2      	lsls	r2, r4, #3
 8001ada:	4614      	mov	r4, r2
 8001adc:	461d      	mov	r5, r3
 8001ade:	eb14 030a 	adds.w	r3, r4, sl
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	eb45 030b 	adc.w	r3, r5, fp
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af6:	4629      	mov	r1, r5
 8001af8:	028b      	lsls	r3, r1, #10
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b00:	4621      	mov	r1, r4
 8001b02:	028a      	lsls	r2, r1, #10
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b14:	f7fe fb5c 	bl	80001d0 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3740      	adds	r7, #64	; 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	017d7840 	.word	0x017d7840

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08005768 	.word	0x08005768

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0b5b      	lsrs	r3, r3, #13
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08005768 	.word	0x08005768

08001bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_RCC_GetClockConfig+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f839 	bl	8001cc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9d8 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04e      	b.n	8001d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_TIM_Base_Start_IT+0xd0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d010      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	e007      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40001800 	.word	0x40001800

08001dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0202 	mvn.w	r2, #2
 8001de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8ee 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8e0 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8f1 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0204 	mvn.w	r2, #4
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8c4 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8b6 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8c7 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0208 	mvn.w	r2, #8
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2204      	movs	r2, #4
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f89a 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f88c 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f89d 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0210 	mvn.w	r2, #16
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f870 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f862 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f873 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0201 	mvn.w	r2, #1
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fcd6 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f902 	bl	8002170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f838 	bl	8002008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0220 	mvn.w	r2, #32
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8cc 	bl	800215c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d00f      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <TIM_Base_SetConfig+0x118>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <TIM_Base_SetConfig+0x11c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3b      	ldr	r2, [pc, #236]	; (800213c <TIM_Base_SetConfig+0x120>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <TIM_Base_SetConfig+0x124>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d027      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <TIM_Base_SetConfig+0x118>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d023      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <TIM_Base_SetConfig+0x11c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2a      	ldr	r2, [pc, #168]	; (800213c <TIM_Base_SetConfig+0x120>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <TIM_Base_SetConfig+0x124>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <TIM_Base_SetConfig+0x128>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <TIM_Base_SetConfig+0x12c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <TIM_Base_SetConfig+0x130>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_Base_SetConfig+0x134>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <TIM_Base_SetConfig+0x138>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a23      	ldr	r2, [pc, #140]	; (8002158 <TIM_Base_SetConfig+0x13c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <TIM_Base_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0xf8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <TIM_Base_SetConfig+0x124>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40010400 	.word	0x40010400
 8002144:	40014000 	.word	0x40014000
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800
 8002150:	40001800 	.word	0x40001800
 8002154:	40001c00 	.word	0x40001c00
 8002158:	40002000 	.word	0x40002000

0800215c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e03f      	b.n	8002216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fbe0 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fcdf 	bl	8002b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	4613      	mov	r3, r2
 800222a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b20      	cmp	r3, #32
 8002236:	d11d      	bne.n	8002274 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Receive_IT+0x26>
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e016      	b.n	8002276 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Receive_IT+0x38>
 8002252:	2302      	movs	r3, #2
 8002254:	e00f      	b.n	8002276 <HAL_UART_Receive_IT+0x58>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	461a      	mov	r2, r3
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fab6 	bl	80027dc <UART_Start_Receive_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	e000      	b.n	8002276 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0ba      	sub	sp, #232	; 0xe8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
 80022d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb99 	bl	8002a16 <UART_Receive_IT>
      return;
 80022e4:	e256      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80de 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
 80022f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80d1 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
 8002316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
 800235e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
 8002382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800238e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0208 	orr.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81ed 	beq.w	800278a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
 80023bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fb24 	bl	8002a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_UART_IRQHandler+0x17a>
 80023f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04f      	beq.n	800249a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa2c 	bl	8002858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d141      	bne.n	8002492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3314      	adds	r3, #20
 8002436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1d9      	bne.n	800240e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d013      	beq.n	800248a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <HAL_UART_IRQHandler+0x3dc>)
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd78 	bl	8000f64 <HAL_DMA_Abort_IT>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002484:	4610      	mov	r0, r2
 8002486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	e00e      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f990 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	e00a      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f98c 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e006      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f988 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024a6:	e170      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	bf00      	nop
    return;
 80024aa:	e16e      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	f040 814a 	bne.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8143 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 813c 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	f040 80b4 	bne.w	8002660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8140 	beq.w	800278e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002516:	429a      	cmp	r2, r3
 8002518:	f080 8139 	bcs.w	800278e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	f000 8088 	beq.w	8002642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800255e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800256a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1d9      	bne.n	8002532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800258e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3314      	adds	r3, #20
 800259e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e1      	bne.n	800257e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002624:	65ba      	str	r2, [r7, #88]	; 0x58
 8002626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e3      	bne.n	8002600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fc21 	bl	8000e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264a:	b29b      	uxth	r3, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8b6 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002658:	e099      	b.n	800278e <HAL_UART_IRQHandler+0x50e>
 800265a:	bf00      	nop
 800265c:	0800291f 	.word	0x0800291f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002668:	b29b      	uxth	r3, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 808b 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800267c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8086 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800269c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026aa:	647a      	str	r2, [r7, #68]	; 0x44
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e3      	bne.n	8002686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	623b      	str	r3, [r7, #32]
   return(result);
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026e2:	633a      	str	r2, [r7, #48]	; 0x30
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e3      	bne.n	80026be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	e853 3f00 	ldrex	r3, [r3]
 8002712:	60fb      	str	r3, [r7, #12]
   return(result);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0310 	bic.w	r3, r3, #16
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	e841 2300 	strex	r3, r2, [r1]
 8002734:	617b      	str	r3, [r7, #20]
   return(result);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e3      	bne.n	8002704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800273c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f83e 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002748:	e023      	b.n	8002792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8ef 	bl	8002946 <UART_Transmit_IT>
    return;
 8002768:	e014      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f92f 	bl	80029e6 <UART_EndTransmit_IT>
    return;
 8002788:	e004      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    return;
 800278a:	bf00      	nop
 800278c:	e002      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 8002792:	bf00      	nop
  }
}
 8002794:	37e8      	adds	r7, #232	; 0xe8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2222      	movs	r2, #34	; 0x22
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002828:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b095      	sub	sp, #84	; 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002880:	643a      	str	r2, [r7, #64]	; 0x40
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e5      	bne.n	8002860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028f0:	61ba      	str	r2, [r7, #24]
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002912:	bf00      	nop
 8002914:	3754      	adds	r7, #84	; 0x54
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff ff39 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b21      	cmp	r3, #33	; 0x21
 8002958:	d13e      	bne.n	80029d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	d114      	bne.n	800298e <UART_Transmit_IT+0x48>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d110      	bne.n	800298e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	e008      	b.n	80029a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6211      	str	r1, [r2, #32]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4619      	mov	r1, r3
 80029ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fec8 	bl	800279c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08c      	sub	sp, #48	; 0x30
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b22      	cmp	r3, #34	; 0x22
 8002a28:	f040 80ab 	bne.w	8002b82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d117      	bne.n	8002a66 <UART_Receive_IT+0x50>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d113      	bne.n	8002a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
 8002a64:	e026      	b.n	8002ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d007      	beq.n	8002a8a <UART_Receive_IT+0x74>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <UART_Receive_IT+0x82>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e008      	b.n	8002aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d15a      	bne.n	8002b7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0220 	bic.w	r2, r2, #32
 8002ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d135      	bne.n	8002b74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f023 0310 	bic.w	r3, r3, #16
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	623a      	str	r2, [r7, #32]
 8002b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	69f9      	ldr	r1, [r7, #28]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d10a      	bne.n	8002b66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fe29 	bl	80027c4 <HAL_UARTEx_RxEventCallback>
 8002b72:	e002      	b.n	8002b7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fd fd57 	bl	8000628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e002      	b.n	8002b84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b0c0      	sub	sp, #256	; 0x100
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	ea40 0301 	orr.w	r3, r0, r1
 8002bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be4:	f021 010c 	bic.w	r1, r1, #12
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	6999      	ldr	r1, [r3, #24]
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	ea40 0301 	orr.w	r3, r0, r1
 8002c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b8f      	ldr	r3, [pc, #572]	; (8002e58 <UART_SetConfig+0x2cc>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d005      	beq.n	8002c2c <UART_SetConfig+0xa0>
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <UART_SetConfig+0x2d0>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d104      	bne.n	8002c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7fe ffb6 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8002c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c34:	e003      	b.n	8002c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c36:	f7fe ff9d 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c48:	f040 810c 	bne.w	8002e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	1891      	adds	r1, r2, r2
 8002c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c66:	415b      	adcs	r3, r3
 8002c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c6e:	4621      	mov	r1, r4
 8002c70:	eb12 0801 	adds.w	r8, r2, r1
 8002c74:	4629      	mov	r1, r5
 8002c76:	eb43 0901 	adc.w	r9, r3, r1
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8e:	4690      	mov	r8, r2
 8002c90:	4699      	mov	r9, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	eb18 0303 	adds.w	r3, r8, r3
 8002c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	eb49 0303 	adc.w	r3, r9, r3
 8002ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cba:	460b      	mov	r3, r1
 8002cbc:	18db      	adds	r3, r3, r3
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	eb42 0303 	adc.w	r3, r2, r3
 8002cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cd0:	f7fd fa7e 	bl	80001d0 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <UART_SetConfig+0x2d4>)
 8002cda:	fba3 2302 	umull	r2, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	011c      	lsls	r4, r3, #4
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	1891      	adds	r1, r2, r2
 8002cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d04:	4641      	mov	r1, r8
 8002d06:	eb12 0a01 	adds.w	sl, r2, r1
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d24:	4692      	mov	sl, r2
 8002d26:	469b      	mov	fp, r3
 8002d28:	4643      	mov	r3, r8
 8002d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d32:	464b      	mov	r3, r9
 8002d34:	eb4b 0303 	adc.w	r3, fp, r3
 8002d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	643b      	str	r3, [r7, #64]	; 0x40
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d66:	f7fd fa33 	bl	80001d0 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <UART_SetConfig+0x2d4>)
 8002d72:	fba3 2301 	umull	r2, r3, r3, r1
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2264      	movs	r2, #100	; 0x64
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	1acb      	subs	r3, r1, r3
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d86:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <UART_SetConfig+0x2d4>)
 8002d88:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d94:	441c      	add	r4, r3
 8002d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002da8:	4642      	mov	r2, r8
 8002daa:	464b      	mov	r3, r9
 8002dac:	1891      	adds	r1, r2, r2
 8002dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db0:	415b      	adcs	r3, r3
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002db8:	4641      	mov	r1, r8
 8002dba:	1851      	adds	r1, r2, r1
 8002dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	414b      	adcs	r3, r1
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	00cb      	lsls	r3, r1, #3
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dda:	4651      	mov	r1, sl
 8002ddc:	00ca      	lsls	r2, r1, #3
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	4642      	mov	r2, r8
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dec:	464b      	mov	r3, r9
 8002dee:	460a      	mov	r2, r1
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	18db      	adds	r3, r3, r3
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e12:	4613      	mov	r3, r2
 8002e14:	eb42 0303 	adc.w	r3, r2, r3
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e22:	f7fd f9d5 	bl	80001d0 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <UART_SetConfig+0x2d4>)
 8002e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2164      	movs	r1, #100	; 0x64
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <UART_SetConfig+0x2d4>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 0207 	and.w	r2, r3, #7
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4422      	add	r2, r4
 8002e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e54:	e105      	b.n	8003062 <UART_SetConfig+0x4d6>
 8002e56:	bf00      	nop
 8002e58:	40011000 	.word	0x40011000
 8002e5c:	40011400 	.word	0x40011400
 8002e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e76:	4642      	mov	r2, r8
 8002e78:	464b      	mov	r3, r9
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	6239      	str	r1, [r7, #32]
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e86:	4641      	mov	r1, r8
 8002e88:	1854      	adds	r4, r2, r1
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	eb43 0501 	adc.w	r5, r3, r1
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00eb      	lsls	r3, r5, #3
 8002e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9e:	00e2      	lsls	r2, r4, #3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	18e3      	adds	r3, r4, r3
 8002ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eac:	464b      	mov	r3, r9
 8002eae:	eb45 0303 	adc.w	r3, r5, r3
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	008b      	lsls	r3, r1, #2
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002edc:	4621      	mov	r1, r4
 8002ede:	008a      	lsls	r2, r1, #2
 8002ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ee4:	f7fd f974 	bl	80001d0 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4b60      	ldr	r3, [pc, #384]	; (8003070 <UART_SetConfig+0x4e4>)
 8002eee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	011c      	lsls	r4, r3, #4
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1891      	adds	r1, r2, r2
 8002f0e:	61b9      	str	r1, [r7, #24]
 8002f10:	415b      	adcs	r3, r3
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f18:	4641      	mov	r1, r8
 8002f1a:	1851      	adds	r1, r2, r1
 8002f1c:	6139      	str	r1, [r7, #16]
 8002f1e:	4649      	mov	r1, r9
 8002f20:	414b      	adcs	r3, r1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f30:	4659      	mov	r1, fp
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4642      	mov	r2, r8
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	460a      	mov	r2, r1
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f70:	4649      	mov	r1, r9
 8002f72:	008b      	lsls	r3, r1, #2
 8002f74:	4641      	mov	r1, r8
 8002f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	008a      	lsls	r2, r1, #2
 8002f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f82:	f7fd f925 	bl	80001d0 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <UART_SetConfig+0x4e4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	; 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	3332      	adds	r3, #50	; 0x32
 8002f9e:	4a34      	ldr	r2, [pc, #208]	; (8003070 <UART_SetConfig+0x4e4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	441c      	add	r4, r3
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fba:	4642      	mov	r2, r8
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fca:	4641      	mov	r1, r8
 8002fcc:	1851      	adds	r1, r2, r1
 8002fce:	6039      	str	r1, [r7, #0]
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	414b      	adcs	r3, r1
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fe2:	4659      	mov	r1, fp
 8002fe4:	00cb      	lsls	r3, r1, #3
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fec:	4651      	mov	r1, sl
 8002fee:	00ca      	lsls	r2, r1, #3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4642      	mov	r2, r8
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	460a      	mov	r2, r1
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	663b      	str	r3, [r7, #96]	; 0x60
 8003010:	667a      	str	r2, [r7, #100]	; 0x64
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800301e:	4649      	mov	r1, r9
 8003020:	008b      	lsls	r3, r1, #2
 8003022:	4641      	mov	r1, r8
 8003024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003028:	4641      	mov	r1, r8
 800302a:	008a      	lsls	r2, r1, #2
 800302c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003030:	f7fd f8ce 	bl	80001d0 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <UART_SetConfig+0x4e4>)
 800303a:	fba3 1302 	umull	r1, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2164      	movs	r1, #100	; 0x64
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	3332      	adds	r3, #50	; 0x32
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <UART_SetConfig+0x4e4>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4422      	add	r2, r4
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	bf00      	nop
 8003064:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	51eb851f 	.word	0x51eb851f

08003074 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f103 0208 	add.w	r2, r3, #8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f103 0208 	add.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d103      	bne.n	8003136 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e00c      	b.n	8003150 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3308      	adds	r3, #8
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e002      	b.n	8003144 <vListInsert+0x2e>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d2f6      	bcs.n	800313e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6892      	ldr	r2, [r2, #8]
 800319e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6852      	ldr	r2, [r2, #4]
 80031a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d103      	bne.n	80031bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1e5a      	subs	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003206:	f001 ff55 	bl	80050b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	441a      	add	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	3b01      	subs	r3, #1
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	441a      	add	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f001 f841 	bl	80042f0 <xTaskRemoveFromEventList>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <xQueueGenericReset+0xcc>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	e009      	b.n	800329a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3310      	adds	r3, #16
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fef2 	bl	8003074 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3324      	adds	r3, #36	; 0x24
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff feed 	bl	8003074 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800329a:	f001 ff3b 	bl	8005114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800329e:	2301      	movs	r3, #1
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	613b      	str	r3, [r7, #16]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	e004      	b.n	80032ec <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3350      	adds	r3, #80	; 0x50
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 f801 	bl	80052f8 <pvPortMalloc>
 80032f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3350      	adds	r3, #80	; 0x50
 8003306:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f805 	bl	8003324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800331a:	69bb      	ldr	r3, [r7, #24]
	}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e002      	b.n	8003346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003352:	2101      	movs	r1, #1
 8003354:	69b8      	ldr	r0, [r7, #24]
 8003356:	f7ff ff41 	bl	80031dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	; 0x38
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueGenericSend+0x32>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <xQueueGenericSend+0x40>
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <xQueueGenericSend+0x44>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <xQueueGenericSend+0x46>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <xQueueGenericSend+0x60>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d103      	bne.n	80033da <xQueueGenericSend+0x6e>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <xQueueGenericSend+0x72>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericSend+0x74>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericSend+0x8e>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	623b      	str	r3, [r7, #32]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033fa:	f001 f915 	bl	8004628 <xTaskGetSchedulerState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <xQueueGenericSend+0x9e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xQueueGenericSend+0xa2>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xQueueGenericSend+0xa4>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xQueueGenericSend+0xbe>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61fb      	str	r3, [r7, #28]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800342a:	f001 fe43 	bl	80050b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <xQueueGenericSend+0xd4>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d129      	bne.n	8003494 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003446:	f000 fa07 	bl	8003858 <prvCopyDataToQueue>
 800344a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	3324      	adds	r3, #36	; 0x24
 8003458:	4618      	mov	r0, r3
 800345a:	f000 ff49 	bl	80042f0 <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <xQueueGenericSend+0x1f8>)
 8003466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	e00a      	b.n	800348c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <xQueueGenericSend+0x1f8>)
 800347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800348c:	f001 fe42 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 8003490:	2301      	movs	r3, #1
 8003492:	e063      	b.n	800355c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800349a:	f001 fe3b 	bl	8005114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	e05c      	b.n	800355c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ff81 	bl	80043b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b6:	f001 fe2d 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034ba:	f000 fcfb 	bl	8003eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034be:	f001 fdf9 	bl	80050b4 <vPortEnterCritical>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d103      	bne.n	80034d8 <xQueueGenericSend+0x16c>
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d103      	bne.n	80034ee <xQueueGenericSend+0x182>
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ee:	f001 fe11 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034f2:	1d3a      	adds	r2, r7, #4
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 ff70 	bl	80043e0 <xTaskCheckForTimeOut>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d124      	bne.n	8003550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003508:	f000 fa9e 	bl	8003a48 <prvIsQueueFull>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d018      	beq.n	8003544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	3310      	adds	r3, #16
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fe98 	bl	8004250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003522:	f000 fa29 	bl	8003978 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003526:	f000 fcd3 	bl	8003ed0 <xTaskResumeAll>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f af7c 	bne.w	800342a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <xQueueGenericSend+0x1f8>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	e772      	b.n	800342a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003546:	f000 fa17 	bl	8003978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800354a:	f000 fcc1 	bl	8003ed0 <xTaskResumeAll>
 800354e:	e76c      	b.n	800342a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003552:	f000 fa11 	bl	8003978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003556:	f000 fcbb 	bl	8003ed0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800355a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800355c:	4618      	mov	r0, r3
 800355e:	3738      	adds	r7, #56	; 0x38
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <xQueueGenericSendFromISR+0x3c>
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <xQueueGenericSendFromISR+0x40>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <xQueueGenericSendFromISR+0x42>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	623b      	str	r3, [r7, #32]
}
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <xQueueGenericSendFromISR+0x6a>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <xQueueGenericSendFromISR+0x6e>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericSendFromISR+0x70>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	61fb      	str	r3, [r7, #28]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f2:	f001 fe41 	bl	8005278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035f6:	f3ef 8211 	mrs	r2, BASEPRI
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61ba      	str	r2, [r7, #24]
 800360c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800360e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <xQueueGenericSendFromISR+0xbc>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d12c      	bne.n	800367e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003634:	f000 f910 	bl	8003858 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003638:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d112      	bne.n	8003668 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fe4e 	bl	80042f0 <xTaskRemoveFromEventList>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00e      	beq.n	8003678 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e007      	b.n	8003678 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003668:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800366c:	3301      	adds	r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	b25a      	sxtb	r2, r3
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003678:	2301      	movs	r3, #1
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800367c:	e001      	b.n	8003682 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800367e:	2300      	movs	r3, #0
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800368c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003690:	4618      	mov	r0, r3
 8003692:	3738      	adds	r7, #56	; 0x38
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	; 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xQueueReceive+0x30>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	623b      	str	r3, [r7, #32]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <xQueueReceive+0x3e>
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <xQueueReceive+0x42>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueReceive+0x44>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueReceive+0x5e>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61fb      	str	r3, [r7, #28]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036f6:	f000 ff97 	bl	8004628 <xTaskGetSchedulerState>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <xQueueReceive+0x6e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <xQueueReceive+0x72>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <xQueueReceive+0x74>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueReceive+0x8e>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	61bb      	str	r3, [r7, #24]
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003726:	f001 fcc5 	bl	80050b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01f      	beq.n	8003776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800373a:	f000 f8f7 	bl	800392c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00f      	beq.n	800376e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	3310      	adds	r3, #16
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fdcc 	bl	80042f0 <xTaskRemoveFromEventList>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <xQueueReceive+0x1bc>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800376e:	f001 fcd1 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 8003772:	2301      	movs	r3, #1
 8003774:	e069      	b.n	800384a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800377c:	f001 fcca 	bl	8005114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003780:	2300      	movs	r3, #0
 8003782:	e062      	b.n	800384a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe10 	bl	80043b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003798:	f001 fcbc 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800379c:	f000 fb8a 	bl	8003eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037a0:	f001 fc88 	bl	80050b4 <vPortEnterCritical>
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d103      	bne.n	80037ba <xQueueReceive+0x122>
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d103      	bne.n	80037d0 <xQueueReceive+0x138>
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	f001 fca0 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d4:	1d3a      	adds	r2, r7, #4
 80037d6:	f107 0310 	add.w	r3, r7, #16
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fdff 	bl	80043e0 <xTaskCheckForTimeOut>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d123      	bne.n	8003830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ea:	f000 f917 	bl	8003a1c <prvIsQueueEmpty>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d017      	beq.n	8003824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	3324      	adds	r3, #36	; 0x24
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd27 	bl	8004250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003804:	f000 f8b8 	bl	8003978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003808:	f000 fb62 	bl	8003ed0 <xTaskResumeAll>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d189      	bne.n	8003726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <xQueueReceive+0x1bc>)
 8003814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	e780      	b.n	8003726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003826:	f000 f8a7 	bl	8003978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800382a:	f000 fb51 	bl	8003ed0 <xTaskResumeAll>
 800382e:	e77a      	b.n	8003726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003832:	f000 f8a1 	bl	8003978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003836:	f000 fb4b 	bl	8003ed0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800383a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800383c:	f000 f8ee 	bl	8003a1c <prvIsQueueEmpty>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f43f af6f 	beq.w	8003726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800384a:	4618      	mov	r0, r3
 800384c:	3730      	adds	r7, #48	; 0x30
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d14d      	bne.n	800391a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 feee 	bl	8004664 <xTaskPriorityDisinherit>
 8003888:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e043      	b.n	800391a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d119      	bne.n	80038cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6858      	ldr	r0, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	461a      	mov	r2, r3
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	f001 ff26 	bl	80056f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d32b      	bcc.n	800391a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e026      	b.n	800391a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68d8      	ldr	r0, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	461a      	mov	r2, r3
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	f001 ff0c 	bl	80056f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	425b      	negs	r3, r3
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	425b      	negs	r3, r3
 8003902:	441a      	add	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d105      	bne.n	800391a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3b01      	subs	r3, #1
 8003918:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003922:	697b      	ldr	r3, [r7, #20]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	d303      	bcc.n	8003960 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68d9      	ldr	r1, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	6838      	ldr	r0, [r7, #0]
 800396c:	f001 fec2 	bl	80056f4 <memcpy>
	}
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003980:	f001 fb98 	bl	80050b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800398a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800398c:	e011      	b.n	80039b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3324      	adds	r3, #36	; 0x24
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fca8 	bl	80042f0 <xTaskRemoveFromEventList>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039a6:	f000 fd7d 	bl	80044a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	dce9      	bgt.n	800398e <prvUnlockQueue+0x16>
 80039ba:	e000      	b.n	80039be <prvUnlockQueue+0x46>
					break;
 80039bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	22ff      	movs	r2, #255	; 0xff
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039c6:	f001 fba5 	bl	8005114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039ca:	f001 fb73 	bl	80050b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039d6:	e011      	b.n	80039fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d012      	beq.n	8003a06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3310      	adds	r3, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fc83 	bl	80042f0 <xTaskRemoveFromEventList>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039f0:	f000 fd58 	bl	80044a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	dce9      	bgt.n	80039d8 <prvUnlockQueue+0x60>
 8003a04:	e000      	b.n	8003a08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a10:	f001 fb80 	bl	8005114 <vPortExitCritical>
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a24:	f001 fb46 	bl	80050b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 fb6b 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a50:	f001 fb30 	bl	80050b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d102      	bne.n	8003a66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e001      	b.n	8003a6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a6a:	f001 fb53 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e014      	b.n	8003ab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <vQueueAddToRegistry+0x50>)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <vQueueAddToRegistry+0x50>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <vQueueAddToRegistry+0x50>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003aaa:	e006      	b.n	8003aba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	d9e7      	bls.n	8003a88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	2000011c 	.word	0x2000011c

08003acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003adc:	f001 faea 	bl	80050b4 <vPortEnterCritical>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d103      	bne.n	8003af6 <vQueueWaitForMessageRestricted+0x2a>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d103      	bne.n	8003b0c <vQueueWaitForMessageRestricted+0x40>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b0c:	f001 fb02 	bl	8005114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fbb9 	bl	8004298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff26 	bl	8003978 <prvUnlockQueue>
	}
 8003b2c:	bf00      	nop
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af04      	add	r7, sp, #16
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fbd5 	bl	80052f8 <pvPortMalloc>
 8003b4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b56:	2058      	movs	r0, #88	; 0x58
 8003b58:	f001 fbce 	bl	80052f8 <pvPortMalloc>
 8003b5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
 8003b6a:	e005      	b.n	8003b78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f001 fc87 	bl	8005480 <vPortFree>
 8003b72:	e001      	b.n	8003b78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	2300      	movs	r3, #0
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f80e 	bl	8003bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b9a:	69f8      	ldr	r0, [r7, #28]
 8003b9c:	f000 f89a 	bl	8003cd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e002      	b.n	8003bac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bac:	69bb      	ldr	r3, [r7, #24]
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	21a5      	movs	r1, #165	; 0xa5
 8003bd0:	f001 fd9e 	bl	8005710 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bde:	3b01      	subs	r3, #1
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	617b      	str	r3, [r7, #20]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01f      	beq.n	8003c54 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e012      	b.n	8003c40 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	7819      	ldrb	r1, [r3, #0]
 8003c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	3334      	adds	r3, #52	; 0x34
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d9e9      	bls.n	8003c1a <prvInitialiseNewTask+0x64>
 8003c46:	e000      	b.n	8003c4a <prvInitialiseNewTask+0x94>
			{
				break;
 8003c48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c52:	e003      	b.n	8003c5c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d901      	bls.n	8003c66 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c62:	2304      	movs	r3, #4
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c70:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	2200      	movs	r2, #0
 8003c76:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fa19 	bl	80030b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	3318      	adds	r3, #24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fa14 	bl	80030b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	f1c3 0205 	rsb	r2, r3, #5
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	69b8      	ldr	r0, [r7, #24]
 8003cb6:	f001 f8d3 	bl	8004e60 <pxPortInitialiseStack>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ccc:	bf00      	nop
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cdc:	f001 f9ea 	bl	80050b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <prvAddNewTaskToReadyList+0xc0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <prvAddNewTaskToReadyList+0xc0>)
 8003ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <prvAddNewTaskToReadyList+0xc4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <prvAddNewTaskToReadyList+0xc4>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <prvAddNewTaskToReadyList+0xc0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d110      	bne.n	8003d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d00:	f000 fbf4 	bl	80044ec <prvInitialiseTaskLists>
 8003d04:	e00d      	b.n	8003d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d06:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <prvAddNewTaskToReadyList+0xc8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d0e:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <prvAddNewTaskToReadyList+0xc4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d802      	bhi.n	8003d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <prvAddNewTaskToReadyList+0xc4>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <prvAddNewTaskToReadyList+0xcc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <prvAddNewTaskToReadyList+0xcc>)
 8003d2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <prvAddNewTaskToReadyList+0xcc>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <prvAddNewTaskToReadyList+0xd0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <prvAddNewTaskToReadyList+0xd0>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <prvAddNewTaskToReadyList+0xd4>)
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7ff f9b6 	bl	80030ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d62:	f001 f9d7 	bl	8005114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <prvAddNewTaskToReadyList+0xc8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <prvAddNewTaskToReadyList+0xc4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvAddNewTaskToReadyList+0xd8>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000234 	.word	0x20000234
 8003d98:	2000015c 	.word	0x2000015c
 8003d9c:	20000240 	.word	0x20000240
 8003da0:	20000250 	.word	0x20000250
 8003da4:	2000023c 	.word	0x2000023c
 8003da8:	20000160 	.word	0x20000160
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d017      	beq.n	8003df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <vTaskDelay+0x60>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <vTaskDelay+0x30>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003de0:	f000 f868 	bl	8003eb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003de4:	2100      	movs	r1, #0
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fcc2 	bl	8004770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dec:	f000 f870 	bl	8003ed0 <xTaskResumeAll>
 8003df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <vTaskDelay+0x64>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	2000025c 	.word	0x2000025c
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <vTaskStartScheduler+0x84>)
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	2282      	movs	r2, #130	; 0x82
 8003e2a:	491d      	ldr	r1, [pc, #116]	; (8003ea0 <vTaskStartScheduler+0x88>)
 8003e2c:	481d      	ldr	r0, [pc, #116]	; (8003ea4 <vTaskStartScheduler+0x8c>)
 8003e2e:	f7ff fe81 	bl	8003b34 <xTaskCreate>
 8003e32:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d102      	bne.n	8003e40 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003e3a:	f000 fcff 	bl	800483c <xTimerCreateTimerTask>
 8003e3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d116      	bne.n	8003e74 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	60bb      	str	r3, [r7, #8]
}
 8003e58:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <vTaskStartScheduler+0x90>)
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <vTaskStartScheduler+0x94>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <vTaskStartScheduler+0x98>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e6e:	f001 f87f 	bl	8004f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e72:	e00e      	b.n	8003e92 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d10a      	bne.n	8003e92 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	607b      	str	r3, [r7, #4]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <vTaskStartScheduler+0x78>
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000258 	.word	0x20000258
 8003ea0:	08005740 	.word	0x08005740
 8003ea4:	080044bd 	.word	0x080044bd
 8003ea8:	20000254 	.word	0x20000254
 8003eac:	20000240 	.word	0x20000240
 8003eb0:	20000238 	.word	0x20000238

08003eb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <vTaskSuspendAll+0x18>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <vTaskSuspendAll+0x18>)
 8003ec0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	2000025c 	.word	0x2000025c

08003ed0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <xTaskResumeAll+0x114>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <xTaskResumeAll+0x2c>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	603b      	str	r3, [r7, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003efc:	f001 f8da 	bl	80050b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f00:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <xTaskResumeAll+0x114>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	4a37      	ldr	r2, [pc, #220]	; (8003fe4 <xTaskResumeAll+0x114>)
 8003f08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <xTaskResumeAll+0x114>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d161      	bne.n	8003fd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f12:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <xTaskResumeAll+0x118>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d05d      	beq.n	8003fd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1a:	e02e      	b.n	8003f7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1c:	4b33      	ldr	r3, [pc, #204]	; (8003fec <xTaskResumeAll+0x11c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff f92d 	bl	8003188 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f928 	bl	8003188 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <xTaskResumeAll+0x120>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <xTaskResumeAll+0x120>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <xTaskResumeAll+0x124>)
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7ff f8b4 	bl	80030ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <xTaskResumeAll+0x128>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d302      	bcc.n	8003f7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <xTaskResumeAll+0x12c>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <xTaskResumeAll+0x11c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1cc      	bne.n	8003f1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f88:	f000 fb2e 	bl	80045e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <xTaskResumeAll+0x130>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f98:	f000 f846 	bl	8004028 <xTaskIncrementTick>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <xTaskResumeAll+0x12c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f1      	bne.n	8003f98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <xTaskResumeAll+0x130>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <xTaskResumeAll+0x12c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <xTaskResumeAll+0x134>)
 8003fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd6:	f001 f89d 	bl	8005114 <vPortExitCritical>

	return xAlreadyYielded;
 8003fda:	68bb      	ldr	r3, [r7, #8]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	2000025c 	.word	0x2000025c
 8003fe8:	20000234 	.word	0x20000234
 8003fec:	200001f4 	.word	0x200001f4
 8003ff0:	2000023c 	.word	0x2000023c
 8003ff4:	20000160 	.word	0x20000160
 8003ff8:	2000015c 	.word	0x2000015c
 8003ffc:	20000248 	.word	0x20000248
 8004000:	20000244 	.word	0x20000244
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <xTaskGetTickCount+0x1c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004014:	687b      	ldr	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000238 	.word	0x20000238

08004028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004032:	4b4e      	ldr	r3, [pc, #312]	; (800416c <xTaskIncrementTick+0x144>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 8088 	bne.w	800414c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800403c:	4b4c      	ldr	r3, [pc, #304]	; (8004170 <xTaskIncrementTick+0x148>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004044:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <xTaskIncrementTick+0x148>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d120      	bne.n	8004092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <xTaskIncrementTick+0x14c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <xTaskIncrementTick+0x48>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	603b      	str	r3, [r7, #0]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskIncrementTick+0x46>
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <xTaskIncrementTick+0x14c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b40      	ldr	r3, [pc, #256]	; (8004178 <xTaskIncrementTick+0x150>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3e      	ldr	r2, [pc, #248]	; (8004174 <xTaskIncrementTick+0x14c>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <xTaskIncrementTick+0x150>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <xTaskIncrementTick+0x154>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a3c      	ldr	r2, [pc, #240]	; (800417c <xTaskIncrementTick+0x154>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f000 faab 	bl	80045e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <xTaskIncrementTick+0x158>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d348      	bcc.n	800412e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <xTaskIncrementTick+0x14c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <xTaskIncrementTick+0x158>)
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ac:	601a      	str	r2, [r3, #0]
					break;
 80040ae:	e03e      	b.n	800412e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b30      	ldr	r3, [pc, #192]	; (8004174 <xTaskIncrementTick+0x14c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d203      	bcs.n	80040d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c8:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <xTaskIncrementTick+0x158>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040ce:	e02e      	b.n	800412e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f857 	bl	8003188 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff f84e 	bl	8003188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <xTaskIncrementTick+0x15c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <xTaskIncrementTick+0x15c>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <xTaskIncrementTick+0x160>)
 800410c:	441a      	add	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7fe ffda 	bl	80030ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <xTaskIncrementTick+0x164>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d3b9      	bcc.n	800409c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412c:	e7b6      	b.n	800409c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <xTaskIncrementTick+0x164>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4914      	ldr	r1, [pc, #80]	; (8004188 <xTaskIncrementTick+0x160>)
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d907      	bls.n	8004156 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e004      	b.n	8004156 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <xTaskIncrementTick+0x168>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <xTaskIncrementTick+0x168>)
 8004154:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTaskIncrementTick+0x16c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800415e:	2301      	movs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000025c 	.word	0x2000025c
 8004170:	20000238 	.word	0x20000238
 8004174:	200001ec 	.word	0x200001ec
 8004178:	200001f0 	.word	0x200001f0
 800417c:	2000024c 	.word	0x2000024c
 8004180:	20000254 	.word	0x20000254
 8004184:	2000023c 	.word	0x2000023c
 8004188:	20000160 	.word	0x20000160
 800418c:	2000015c 	.word	0x2000015c
 8004190:	20000244 	.word	0x20000244
 8004194:	20000248 	.word	0x20000248

08004198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <vTaskSwitchContext+0xa4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a6:	4b26      	ldr	r3, [pc, #152]	; (8004240 <vTaskSwitchContext+0xa8>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041ac:	e03f      	b.n	800422e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <vTaskSwitchContext+0xa8>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <vTaskSwitchContext+0xac>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	f1c3 031f 	rsb	r3, r3, #31
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	491f      	ldr	r1, [pc, #124]	; (8004248 <vTaskSwitchContext+0xb0>)
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	607b      	str	r3, [r7, #4]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <vTaskSwitchContext+0x5a>
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <vTaskSwitchContext+0xb0>)
 8004200:	4413      	add	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3308      	adds	r3, #8
 8004216:	429a      	cmp	r2, r3
 8004218:	d104      	bne.n	8004224 <vTaskSwitchContext+0x8c>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <vTaskSwitchContext+0xb4>)
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000025c 	.word	0x2000025c
 8004240:	20000248 	.word	0x20000248
 8004244:	2000023c 	.word	0x2000023c
 8004248:	20000160 	.word	0x20000160
 800424c:	2000015c 	.word	0x2000015c

08004250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60fb      	str	r3, [r7, #12]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <vTaskPlaceOnEventList+0x44>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3318      	adds	r3, #24
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe ff49 	bl	8003116 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004284:	2101      	movs	r1, #1
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	f000 fa72 	bl	8004770 <prvAddCurrentTaskToDelayedList>
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	2000015c 	.word	0x2000015c

08004298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	617b      	str	r3, [r7, #20]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vTaskPlaceOnEventListRestricted+0x54>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7fe ff00 	bl	80030ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
 80042d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	68b8      	ldr	r0, [r7, #8]
 80042de:	f000 fa47 	bl	8004770 <prvAddCurrentTaskToDelayedList>
	}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2000015c 	.word	0x2000015c

080042f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60fb      	str	r3, [r7, #12]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3318      	adds	r3, #24
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe ff31 	bl	8003188 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <xTaskRemoveFromEventList+0xac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11c      	bne.n	8004368 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe ff28 	bl	8003188 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <xTaskRemoveFromEventList+0xb0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <xTaskRemoveFromEventList+0xb0>)
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <xTaskRemoveFromEventList+0xb4>)
 8004358:	441a      	add	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe feb4 	bl	80030ce <vListInsertEnd>
 8004366:	e005      	b.n	8004374 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3318      	adds	r3, #24
 800436c:	4619      	mov	r1, r3
 800436e:	480e      	ldr	r0, [pc, #56]	; (80043a8 <xTaskRemoveFromEventList+0xb8>)
 8004370:	f7fe fead 	bl	80030ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <xTaskRemoveFromEventList+0xbc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	429a      	cmp	r2, r3
 8004380:	d905      	bls.n	800438e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <xTaskRemoveFromEventList+0xc0>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e001      	b.n	8004392 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004392:	697b      	ldr	r3, [r7, #20]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000025c 	.word	0x2000025c
 80043a0:	2000023c 	.word	0x2000023c
 80043a4:	20000160 	.word	0x20000160
 80043a8:	200001f4 	.word	0x200001f4
 80043ac:	2000015c 	.word	0x2000015c
 80043b0:	20000248 	.word	0x20000248

080043b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <vTaskInternalSetTimeOutState+0x24>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <vTaskInternalSetTimeOutState+0x28>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	2000024c 	.word	0x2000024c
 80043dc:	20000238 	.word	0x20000238

080043e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	613b      	str	r3, [r7, #16]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60fb      	str	r3, [r7, #12]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004422:	f000 fe47 	bl	80050b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <xTaskCheckForTimeOut+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e023      	b.n	800448e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <xTaskCheckForTimeOut+0xc0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d007      	beq.n	8004462 <xTaskCheckForTimeOut+0x82>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800445c:	2301      	movs	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e015      	b.n	800448e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d20b      	bcs.n	8004484 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff9b 	bl	80043b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e004      	b.n	800448e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800448e:	f000 fe41 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8004492:	69fb      	ldr	r3, [r7, #28]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000238 	.word	0x20000238
 80044a0:	2000024c 	.word	0x2000024c

080044a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <vTaskMissedYield+0x14>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20000248 	.word	0x20000248

080044bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044c4:	f000 f852 	bl	800456c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvIdleTask+0x28>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d9f9      	bls.n	80044c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <prvIdleTask+0x2c>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044e0:	e7f0      	b.n	80044c4 <prvIdleTask+0x8>
 80044e2:	bf00      	nop
 80044e4:	20000160 	.word	0x20000160
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044f2:	2300      	movs	r3, #0
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	e00c      	b.n	8004512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <prvInitialiseTaskLists+0x60>)
 8004504:	4413      	add	r3, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fdb4 	bl	8003074 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3301      	adds	r3, #1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d9ef      	bls.n	80044f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004518:	480d      	ldr	r0, [pc, #52]	; (8004550 <prvInitialiseTaskLists+0x64>)
 800451a:	f7fe fdab 	bl	8003074 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800451e:	480d      	ldr	r0, [pc, #52]	; (8004554 <prvInitialiseTaskLists+0x68>)
 8004520:	f7fe fda8 	bl	8003074 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004524:	480c      	ldr	r0, [pc, #48]	; (8004558 <prvInitialiseTaskLists+0x6c>)
 8004526:	f7fe fda5 	bl	8003074 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800452a:	480c      	ldr	r0, [pc, #48]	; (800455c <prvInitialiseTaskLists+0x70>)
 800452c:	f7fe fda2 	bl	8003074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004530:	480b      	ldr	r0, [pc, #44]	; (8004560 <prvInitialiseTaskLists+0x74>)
 8004532:	f7fe fd9f 	bl	8003074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvInitialiseTaskLists+0x78>)
 8004538:	4a05      	ldr	r2, [pc, #20]	; (8004550 <prvInitialiseTaskLists+0x64>)
 800453a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <prvInitialiseTaskLists+0x7c>)
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <prvInitialiseTaskLists+0x68>)
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000160 	.word	0x20000160
 8004550:	200001c4 	.word	0x200001c4
 8004554:	200001d8 	.word	0x200001d8
 8004558:	200001f4 	.word	0x200001f4
 800455c:	20000208 	.word	0x20000208
 8004560:	20000220 	.word	0x20000220
 8004564:	200001ec 	.word	0x200001ec
 8004568:	200001f0 	.word	0x200001f0

0800456c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004572:	e019      	b.n	80045a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004574:	f000 fd9e 	bl	80050b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <prvCheckTasksWaitingTermination+0x50>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fdff 	bl	8003188 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvCheckTasksWaitingTermination+0x54>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3b01      	subs	r3, #1
 8004590:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <prvCheckTasksWaitingTermination+0x54>)
 8004592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <prvCheckTasksWaitingTermination+0x58>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <prvCheckTasksWaitingTermination+0x58>)
 800459c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800459e:	f000 fdb9 	bl	8005114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f810 	bl	80045c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <prvCheckTasksWaitingTermination+0x58>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e1      	bne.n	8004574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000208 	.word	0x20000208
 80045c0:	20000234 	.word	0x20000234
 80045c4:	2000021c 	.word	0x2000021c

080045c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 ff53 	bl	8005480 <vPortFree>
			vPortFree( pxTCB );
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 ff50 	bl	8005480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <prvResetNextTaskUnblockTime+0x38>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004600:	e008      	b.n	8004614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <prvResetNextTaskUnblockTime+0x38>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	200001ec 	.word	0x200001ec
 8004624:	20000254 	.word	0x20000254

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <xTaskGetSchedulerState+0x34>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <xTaskGetSchedulerState+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000240 	.word	0x20000240
 8004660:	2000025c 	.word	0x2000025c

08004664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06e      	beq.n	8004758 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <xTaskPriorityDisinherit+0x100>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d00a      	beq.n	800469a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d044      	beq.n	8004758 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d140      	bne.n	8004758 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3304      	adds	r3, #4
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fd54 	bl	8003188 <uxListRemove>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d115      	bne.n	8004712 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	491f      	ldr	r1, [pc, #124]	; (8004768 <xTaskPriorityDisinherit+0x104>)
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xTaskPriorityDisinherit+0xae>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	2201      	movs	r2, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43da      	mvns	r2, r3
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <xTaskPriorityDisinherit+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4013      	ands	r3, r2
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <xTaskPriorityDisinherit+0x108>)
 8004710:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f1c3 0205 	rsb	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <xTaskPriorityDisinherit+0x108>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <xTaskPriorityDisinherit+0x108>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a08      	ldr	r2, [pc, #32]	; (8004768 <xTaskPriorityDisinherit+0x104>)
 8004746:	441a      	add	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fcbd 	bl	80030ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004758:	697b      	ldr	r3, [r7, #20]
	}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000015c 	.word	0x2000015c
 8004768:	20000160 	.word	0x20000160
 800476c:	2000023c 	.word	0x2000023c

08004770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fcfe 	bl	8003188 <uxListRemove>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d10a      	bne.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	481a      	ldr	r0, [pc, #104]	; (800482c <prvAddCurrentTaskToDelayedList+0xbc>)
 80047c2:	f7fe fc84 	bl	80030ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047c6:	e026      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d209      	bcs.n	80047f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fc92 	bl	8003116 <vListInsert>
}
 80047f2:	e010      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe fc88 	bl	8003116 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d202      	bcs.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000238 	.word	0x20000238
 8004824:	2000015c 	.word	0x2000015c
 8004828:	2000023c 	.word	0x2000023c
 800482c:	20000220 	.word	0x20000220
 8004830:	200001f0 	.word	0x200001f0
 8004834:	200001ec 	.word	0x200001ec
 8004838:	20000254 	.word	0x20000254

0800483c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004846:	f000 fad5 	bl	8004df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <xTimerCreateTimerTask+0x54>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <xTimerCreateTimerTask+0x58>)
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	2302      	movs	r3, #2
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	2300      	movs	r3, #0
 800485c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004860:	490d      	ldr	r1, [pc, #52]	; (8004898 <xTimerCreateTimerTask+0x5c>)
 8004862:	480e      	ldr	r0, [pc, #56]	; (800489c <xTimerCreateTimerTask+0x60>)
 8004864:	f7ff f966 	bl	8003b34 <xTaskCreate>
 8004868:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	603b      	str	r3, [r7, #0]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004886:	687b      	ldr	r3, [r7, #4]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000290 	.word	0x20000290
 8004894:	20000294 	.word	0x20000294
 8004898:	08005748 	.word	0x08005748
 800489c:	080049d5 	.word	0x080049d5

080048a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	623b      	str	r3, [r7, #32]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048ce:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <xTimerGenericCommand+0x98>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02a      	beq.n	800492c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	dc18      	bgt.n	800491a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048e8:	f7ff fe9e 	bl	8004628 <xTaskGetSchedulerState>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d109      	bne.n	8004906 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <xTimerGenericCommand+0x98>)
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	f107 0114 	add.w	r1, r7, #20
 80048fa:	2300      	movs	r3, #0
 80048fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fe:	f7fe fd35 	bl	800336c <xQueueGenericSend>
 8004902:	6278      	str	r0, [r7, #36]	; 0x24
 8004904:	e012      	b.n	800492c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <xTimerGenericCommand+0x98>)
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	f107 0114 	add.w	r1, r7, #20
 800490e:	2300      	movs	r3, #0
 8004910:	2200      	movs	r2, #0
 8004912:	f7fe fd2b 	bl	800336c <xQueueGenericSend>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24
 8004918:	e008      	b.n	800492c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <xTimerGenericCommand+0x98>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	f107 0114 	add.w	r1, r7, #20
 8004922:	2300      	movs	r3, #0
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	f7fe fe1f 	bl	8003568 <xQueueGenericSendFromISR>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800492e:	4618      	mov	r0, r3
 8004930:	3728      	adds	r7, #40	; 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000290 	.word	0x20000290

0800493c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <prvProcessExpiredTimer+0x94>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fc17 	bl	8003188 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	18d1      	adds	r1, r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	f000 f8d1 	bl	8004b1c <prvInsertTimerInActiveList>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01f      	beq.n	80049c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2300      	movs	r3, #0
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	2100      	movs	r1, #0
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f7ff ff88 	bl	80048a0 <xTimerGenericCommand>
 8004990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d113      	bne.n	80049c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	4798      	blx	r3
}
 80049c8:	bf00      	nop
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000288 	.word	0x20000288

080049d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f857 	bl	8004a94 <prvGetNextExpireTime>
 80049e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f803 	bl	80049f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049f2:	f000 f8d5 	bl	8004ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049f6:	e7f1      	b.n	80049dc <prvTimerTask+0x8>

080049f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a02:	f7ff fa57 	bl	8003eb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f866 	bl	8004adc <prvSampleTimeNow>
 8004a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d130      	bne.n	8004a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <prvProcessTimerOrBlockTask+0x3c>
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d806      	bhi.n	8004a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a26:	f7ff fa53 	bl	8003ed0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff85 	bl	800493c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a32:	e024      	b.n	8004a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <prvProcessTimerOrBlockTask+0x90>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <prvProcessTimerOrBlockTask+0x50>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <prvProcessTimerOrBlockTask+0x52>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <prvProcessTimerOrBlockTask+0x94>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7ff f837 	bl	8003acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a5e:	f7ff fa37 	bl	8003ed0 <xTaskResumeAll>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <prvProcessTimerOrBlockTask+0x98>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
}
 8004a78:	e001      	b.n	8004a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a7a:	f7ff fa29 	bl	8003ed0 <xTaskResumeAll>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2000028c 	.word	0x2000028c
 8004a8c:	20000290 	.word	0x20000290
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <prvGetNextExpireTime+0x44>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <prvGetNextExpireTime+0x16>
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	e000      	b.n	8004aac <prvGetNextExpireTime+0x18>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <prvGetNextExpireTime+0x44>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e001      	b.n	8004ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000288 	.word	0x20000288

08004adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ae4:	f7ff fa90 	bl	8004008 <xTaskGetTickCount>
 8004ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <prvSampleTimeNow+0x3c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d205      	bcs.n	8004b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004af4:	f000 f91a 	bl	8004d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b06:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <prvSampleTimeNow+0x3c>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000298 	.word	0x20000298

08004b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d812      	bhi.n	8004b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e01b      	b.n	8004b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <prvInsertTimerInActiveList+0x7c>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7fe fad8 	bl	8003116 <vListInsert>
 8004b66:	e012      	b.n	8004b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d206      	bcs.n	8004b7e <prvInsertTimerInActiveList+0x62>
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e007      	b.n	8004b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <prvInsertTimerInActiveList+0x80>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fe fac4 	bl	8003116 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b8e:	697b      	ldr	r3, [r7, #20]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	2000028c 	.word	0x2000028c
 8004b9c:	20000288 	.word	0x20000288

08004ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ba6:	e0ae      	b.n	8004d06 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f2c0 80aa 	blt.w	8004d04 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fae1 	bl	8003188 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff87 	bl	8004adc <prvSampleTimeNow>
 8004bce:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	f200 8097 	bhi.w	8004d06 <prvProcessReceivedCommands+0x166>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <prvProcessReceivedCommands+0x40>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c09 	.word	0x08004c09
 8004bec:	08004c7d 	.word	0x08004c7d
 8004bf0:	08004c91 	.word	0x08004c91
 8004bf4:	08004cdb 	.word	0x08004cdb
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c09 	.word	0x08004c09
 8004c00:	08004c7d 	.word	0x08004c7d
 8004c04:	08004c91 	.word	0x08004c91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	18d1      	adds	r1, r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c28:	f7ff ff78 	bl	8004b1c <prvInsertTimerInActiveList>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d069      	beq.n	8004d06 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05e      	beq.n	8004d06 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	441a      	add	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c5a:	f7ff fe21 	bl	80048a0 <xTimerGenericCommand>
 8004c5e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d14f      	bne.n	8004d06 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61bb      	str	r3, [r7, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c8e:	e03a      	b.n	8004d06 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	617b      	str	r3, [r7, #20]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	18d1      	adds	r1, r2, r3
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cd4:	f7ff ff22 	bl	8004b1c <prvInsertTimerInActiveList>
					break;
 8004cd8:	e015      	b.n	8004d06 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cea:	f000 fbc9 	bl	8005480 <vPortFree>
 8004cee:	e00a      	b.n	8004d06 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d02:	e000      	b.n	8004d06 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <prvProcessReceivedCommands+0x188>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f107 0108 	add.w	r1, r7, #8
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fcc1 	bl	8003698 <xQueueReceive>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f47f af45 	bne.w	8004ba8 <prvProcessReceivedCommands+0x8>
	}
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3728      	adds	r7, #40	; 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000290 	.word	0x20000290

08004d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d32:	e048      	b.n	8004dc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d34:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fa1b 	bl	8003188 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02e      	beq.n	8004dc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d90e      	bls.n	8004d98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe f9c0 	bl	8003116 <vListInsert>
 8004d96:	e016      	b.n	8004dc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	2100      	movs	r1, #0
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fd7c 	bl	80048a0 <xTimerGenericCommand>
 8004da8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	603b      	str	r3, [r7, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1b1      	bne.n	8004d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <prvSwitchTimerLists+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <prvSwitchTimerLists+0xc0>)
 8004ddc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dde:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <prvSwitchTimerLists+0xc4>)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000288 	.word	0x20000288
 8004df0:	2000028c 	.word	0x2000028c

08004df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004df8:	f000 f95c 	bl	80050b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e04:	4811      	ldr	r0, [pc, #68]	; (8004e4c <prvCheckForValidListAndQueue+0x58>)
 8004e06:	f7fe f935 	bl	8003074 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e0a:	4811      	ldr	r0, [pc, #68]	; (8004e50 <prvCheckForValidListAndQueue+0x5c>)
 8004e0c:	f7fe f932 	bl	8003074 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e12:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <prvCheckForValidListAndQueue+0x58>)
 8004e14:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <prvCheckForValidListAndQueue+0x64>)
 8004e18:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <prvCheckForValidListAndQueue+0x5c>)
 8004e1a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	210c      	movs	r1, #12
 8004e20:	200a      	movs	r0, #10
 8004e22:	f7fe fa43 	bl	80032ac <xQueueGenericCreate>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4908      	ldr	r1, [pc, #32]	; (8004e5c <prvCheckForValidListAndQueue+0x68>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fe1c 	bl	8003a78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e40:	f000 f968 	bl	8005114 <vPortExitCritical>
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000290 	.word	0x20000290
 8004e4c:	20000260 	.word	0x20000260
 8004e50:	20000274 	.word	0x20000274
 8004e54:	20000288 	.word	0x20000288
 8004e58:	2000028c 	.word	0x2000028c
 8004e5c:	08005750 	.word	0x08005750

08004e60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b04      	subs	r3, #4
 8004e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e90:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <pxPortInitialiseStack+0x64>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b14      	subs	r3, #20
 8004e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f06f 0202 	mvn.w	r2, #2
 8004eae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3b20      	subs	r3, #32
 8004eb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	08004ec9 	.word	0x08004ec9

08004ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <prvTaskExitError+0x54>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d00a      	beq.n	8004ef2 <prvTaskExitError+0x2a>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <prvTaskExitError+0x28>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60bb      	str	r3, [r7, #8]
}
 8004f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f06:	bf00      	nop
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0fc      	beq.n	8004f08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <pxCurrentTCBConst2>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	f380 8809 	msr	PSP, r0
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	4770      	bx	lr
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst2>:
 8004f40:	2000015c 	.word	0x2000015c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f48:	4808      	ldr	r0, [pc, #32]	; (8004f6c <prvPortStartFirstTask+0x24>)
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	6800      	ldr	r0, [r0, #0]
 8004f4e:	f380 8808 	msr	MSP, r0
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8814 	msr	CONTROL, r0
 8004f5a:	b662      	cpsie	i
 8004f5c:	b661      	cpsie	f
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	df00      	svc	0
 8004f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed08 	.word	0xe000ed08

08004f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f76:	4b46      	ldr	r3, [pc, #280]	; (8005090 <xPortStartScheduler+0x120>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	; (8005094 <xPortStartScheduler+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10a      	bne.n	8004f96 <xPortStartScheduler+0x26>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f96:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <xPortStartScheduler+0x128>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <xPortStartScheduler+0x12c>)
 8004fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <xPortStartScheduler+0x130>)
 8004fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe4:	e009      	b.n	8004ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d0ef      	beq.n	8004fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005006:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1c3 0307 	rsb	r3, r3, #7
 800500e:	2b04      	cmp	r3, #4
 8005010:	d00a      	beq.n	8005028 <xPortStartScheduler+0xb8>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60bb      	str	r3, [r7, #8]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <xPortStartScheduler+0x134>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <xPortStartScheduler+0x134>)
 8005030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xPortStartScheduler+0x134>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <xPortStartScheduler+0x134>)
 800503c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005046:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <xPortStartScheduler+0x138>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <xPortStartScheduler+0x138>)
 800504c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005052:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <xPortStartScheduler+0x138>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <xPortStartScheduler+0x138>)
 8005058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800505c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800505e:	f000 f8dd 	bl	800521c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <xPortStartScheduler+0x13c>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005068:	f000 f8fc 	bl	8005264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <xPortStartScheduler+0x140>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <xPortStartScheduler+0x140>)
 8005072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005078:	f7ff ff66 	bl	8004f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800507c:	f7ff f88c 	bl	8004198 <vTaskSwitchContext>
	prvTaskExitError();
 8005080:	f7ff ff22 	bl	8004ec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000ed00 	.word	0xe000ed00
 8005094:	410fc271 	.word	0x410fc271
 8005098:	410fc270 	.word	0x410fc270
 800509c:	e000e400 	.word	0xe000e400
 80050a0:	2000029c 	.word	0x2000029c
 80050a4:	200002a0 	.word	0x200002a0
 80050a8:	e000ed20 	.word	0xe000ed20
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	e000ef34 	.word	0xe000ef34

080050b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	607b      	str	r3, [r7, #4]
}
 80050cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <vPortEnterCritical+0x58>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a0d      	ldr	r2, [pc, #52]	; (800510c <vPortEnterCritical+0x58>)
 80050d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <vPortEnterCritical+0x58>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10f      	bne.n	8005100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <vPortEnterCritical+0x5c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	603b      	str	r3, [r7, #0]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <vPortEnterCritical+0x4a>
	}
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	2000000c 	.word	0x2000000c
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <vPortExitCritical+0x50>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <vPortExitCritical+0x24>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <vPortExitCritical+0x50>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <vPortExitCritical+0x50>)
 8005140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <vPortExitCritical+0x50>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d105      	bne.n	8005156 <vPortExitCritical+0x42>
 800514a:	2300      	movs	r3, #0
 800514c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f383 8811 	msr	BASEPRI, r3
}
 8005154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000000c 	.word	0x2000000c
	...

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f01e 0f10 	tst.w	lr, #16
 8005180:	bf08      	it	eq
 8005182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005194:	f380 8811 	msr	BASEPRI, r0
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f7fe fffa 	bl	8004198 <vTaskSwitchContext>
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f380 8811 	msr	BASEPRI, r0
 80051ac:	bc09      	pop	{r0, r3}
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	6808      	ldr	r0, [r1, #0]
 80051b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	f01e 0f10 	tst.w	lr, #16
 80051ba:	bf08      	it	eq
 80051bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051c0:	f380 8809 	msr	PSP, r0
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst>:
 80051d0:	2000015c 	.word	0x2000015c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051f2:	f7fe ff19 	bl	8004028 <xTaskIncrementTick>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <SysTick_Handler+0x40>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f383 8811 	msr	BASEPRI, r3
}
 800520e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <vPortSetupTimerInterrupt+0x38>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <vPortSetupTimerInterrupt+0x3c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <vPortSetupTimerInterrupt+0x40>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <vPortSetupTimerInterrupt+0x44>)
 800523a:	3b01      	subs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010
 8005254:	e000e018 	.word	0xe000e018
 8005258:	20000000 	.word	0x20000000
 800525c:	10624dd3 	.word	0x10624dd3
 8005260:	e000e014 	.word	0xe000e014

08005264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005274 <vPortEnableVFP+0x10>
 8005268:	6801      	ldr	r1, [r0, #0]
 800526a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800526e:	6001      	str	r1, [r0, #0]
 8005270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005272:	bf00      	nop
 8005274:	e000ed88 	.word	0xe000ed88

08005278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d914      	bls.n	80052b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <vPortValidateInterruptPriority+0x70>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <vPortValidateInterruptPriority+0x74>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20a      	bcs.n	80052b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <vPortValidateInterruptPriority+0x78>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <vPortValidateInterruptPriority+0x7c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d90a      	bls.n	80052da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	603b      	str	r3, [r7, #0]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vPortValidateInterruptPriority+0x60>
	}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e3f0 	.word	0xe000e3f0
 80052ec:	2000029c 	.word	0x2000029c
 80052f0:	e000ed0c 	.word	0xe000ed0c
 80052f4:	200002a0 	.word	0x200002a0

080052f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005304:	f7fe fdd6 	bl	8003eb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005308:	4b58      	ldr	r3, [pc, #352]	; (800546c <pvPortMalloc+0x174>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005310:	f000 f910 	bl	8005534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005314:	4b56      	ldr	r3, [pc, #344]	; (8005470 <pvPortMalloc+0x178>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 808e 	bne.w	800543e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01d      	beq.n	8005364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005328:	2208      	movs	r2, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d014      	beq.n	8005364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	3308      	adds	r3, #8
 8005342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <pvPortMalloc+0x6c>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d069      	beq.n	800543e <pvPortMalloc+0x146>
 800536a:	4b42      	ldr	r3, [pc, #264]	; (8005474 <pvPortMalloc+0x17c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d864      	bhi.n	800543e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005374:	4b40      	ldr	r3, [pc, #256]	; (8005478 <pvPortMalloc+0x180>)
 8005376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005378:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <pvPortMalloc+0x180>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800537e:	e004      	b.n	800538a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <pvPortMalloc+0xa4>
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f1      	bne.n	8005380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800539c:	4b33      	ldr	r3, [pc, #204]	; (800546c <pvPortMalloc+0x174>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d04b      	beq.n	800543e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2208      	movs	r2, #8
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	2308      	movs	r3, #8
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d91f      	bls.n	8005408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <pvPortMalloc+0xf8>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	613b      	str	r3, [r7, #16]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005402:	69b8      	ldr	r0, [r7, #24]
 8005404:	f000 f8f8 	bl	80055f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <pvPortMalloc+0x17c>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a18      	ldr	r2, [pc, #96]	; (8005474 <pvPortMalloc+0x17c>)
 8005414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <pvPortMalloc+0x17c>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <pvPortMalloc+0x184>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d203      	bcs.n	800542a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <pvPortMalloc+0x17c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <pvPortMalloc+0x184>)
 8005428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <pvPortMalloc+0x178>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	431a      	orrs	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800543e:	f7fe fd47 	bl	8003ed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <pvPortMalloc+0x16a>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60fb      	str	r3, [r7, #12]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <pvPortMalloc+0x168>
	return pvReturn;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3728      	adds	r7, #40	; 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20012eac 	.word	0x20012eac
 8005470:	20012eb8 	.word	0x20012eb8
 8005474:	20012eb0 	.word	0x20012eb0
 8005478:	20012ea4 	.word	0x20012ea4
 800547c:	20012eb4 	.word	0x20012eb4

08005480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d048      	beq.n	8005524 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005492:	2308      	movs	r3, #8
 8005494:	425b      	negs	r3, r3
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4b21      	ldr	r3, [pc, #132]	; (800552c <vPortFree+0xac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <vPortFree+0x44>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <vPortFree+0x62>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60bb      	str	r3, [r7, #8]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <vPortFree+0xac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d019      	beq.n	8005524 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d115      	bne.n	8005524 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <vPortFree+0xac>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005508:	f7fe fcd4 	bl	8003eb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <vPortFree+0xb0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4413      	add	r3, r2
 8005516:	4a06      	ldr	r2, [pc, #24]	; (8005530 <vPortFree+0xb0>)
 8005518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f000 f86c 	bl	80055f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005520:	f7fe fcd6 	bl	8003ed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005524:	bf00      	nop
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20012eb8 	.word	0x20012eb8
 8005530:	20012eb0 	.word	0x20012eb0

08005534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800553a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800553e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005540:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <prvHeapInit+0xac>)
 8005542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3307      	adds	r3, #7
 8005552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0307 	bic.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <prvHeapInit+0xac>)
 8005564:	4413      	add	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <prvHeapInit+0xb0>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <prvHeapInit+0xb0>)
 8005574:	2200      	movs	r2, #0
 8005576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4413      	add	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005580:	2208      	movs	r2, #8
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <prvHeapInit+0xb4>)
 8005594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <prvHeapInit+0xb4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <prvHeapInit+0xb4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <prvHeapInit+0xb4>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <prvHeapInit+0xb8>)
 80055c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <prvHeapInit+0xbc>)
 80055ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <prvHeapInit+0xc0>)
 80055ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	200002a4 	.word	0x200002a4
 80055e4:	20012ea4 	.word	0x20012ea4
 80055e8:	20012eac 	.word	0x20012eac
 80055ec:	20012eb4 	.word	0x20012eb4
 80055f0:	20012eb0 	.word	0x20012eb0
 80055f4:	20012eb8 	.word	0x20012eb8

080055f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005600:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <prvInsertBlockIntoFreeList+0xac>)
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e002      	b.n	800560c <prvInsertBlockIntoFreeList+0x14>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d8f7      	bhi.n	8005606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d108      	bne.n	800563a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	441a      	add	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d118      	bne.n	8005680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d00d      	beq.n	8005676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e008      	b.n	8005688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e003      	b.n	8005688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d002      	beq.n	8005696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20012ea4 	.word	0x20012ea4
 80056a8:	20012eac 	.word	0x20012eac

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4d0d      	ldr	r5, [pc, #52]	; (80056e4 <__libc_init_array+0x38>)
 80056b0:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b2:	1b64      	subs	r4, r4, r5
 80056b4:	10a4      	asrs	r4, r4, #2
 80056b6:	2600      	movs	r6, #0
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	4d0b      	ldr	r5, [pc, #44]	; (80056ec <__libc_init_array+0x40>)
 80056be:	4c0c      	ldr	r4, [pc, #48]	; (80056f0 <__libc_init_array+0x44>)
 80056c0:	f000 f82e 	bl	8005720 <_init>
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	2600      	movs	r6, #0
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08005778 	.word	0x08005778
 80056e8:	08005778 	.word	0x08005778
 80056ec:	08005778 	.word	0x08005778
 80056f0:	0800577c 	.word	0x0800577c

080056f4 <memcpy>:
 80056f4:	440a      	add	r2, r1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	4770      	bx	lr
 8005700:	b510      	push	{r4, lr}
 8005702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570a:	4291      	cmp	r1, r2
 800570c:	d1f9      	bne.n	8005702 <memcpy+0xe>
 800570e:	bd10      	pop	{r4, pc}

08005710 <memset>:
 8005710:	4402      	add	r2, r0
 8005712:	4603      	mov	r3, r0
 8005714:	4293      	cmp	r3, r2
 8005716:	d100      	bne.n	800571a <memset+0xa>
 8005718:	4770      	bx	lr
 800571a:	f803 1b01 	strb.w	r1, [r3], #1
 800571e:	e7f9      	b.n	8005714 <memset+0x4>

08005720 <_init>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr

0800572c <_fini>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr
